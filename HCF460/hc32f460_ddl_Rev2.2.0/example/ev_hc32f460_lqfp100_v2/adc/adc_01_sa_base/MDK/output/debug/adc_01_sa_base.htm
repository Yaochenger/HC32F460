<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\adc_01_sa_base.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\adc_01_sa_base.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jul 18 13:27:44 2022
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; UART_PrintfInit &rArr; SetUartBaudrate &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8a]">IRQ128_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">IRQ128_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9e]">BSP_PRINTF_PortInit</a> from ev_hc32f460_lqfp100_v2.o(i.BSP_PRINTF_PortInit) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from hc32f460_interrupts.o(i.BusFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from hc32f460_interrupts.o(i.DebugMon_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hc32f460_interrupts.o(i.HardFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a]">IRQ000_Handler</a> from hc32f460_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b]">IRQ001_Handler</a> from hc32f460_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c]">IRQ002_Handler</a> from hc32f460_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[d]">IRQ003_Handler</a> from hc32f460_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[e]">IRQ004_Handler</a> from hc32f460_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[f]">IRQ005_Handler</a> from hc32f460_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[10]">IRQ006_Handler</a> from hc32f460_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[11]">IRQ007_Handler</a> from hc32f460_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[12]">IRQ008_Handler</a> from hc32f460_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[13]">IRQ009_Handler</a> from hc32f460_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[14]">IRQ010_Handler</a> from hc32f460_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[15]">IRQ011_Handler</a> from hc32f460_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[16]">IRQ012_Handler</a> from hc32f460_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[17]">IRQ013_Handler</a> from hc32f460_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[18]">IRQ014_Handler</a> from hc32f460_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[19]">IRQ015_Handler</a> from hc32f460_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1a]">IRQ016_Handler</a> from hc32f460_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1b]">IRQ017_Handler</a> from hc32f460_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1c]">IRQ018_Handler</a> from hc32f460_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1d]">IRQ019_Handler</a> from hc32f460_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1e]">IRQ020_Handler</a> from hc32f460_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1f]">IRQ021_Handler</a> from hc32f460_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[20]">IRQ022_Handler</a> from hc32f460_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[21]">IRQ023_Handler</a> from hc32f460_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[22]">IRQ024_Handler</a> from hc32f460_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[23]">IRQ025_Handler</a> from hc32f460_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[24]">IRQ026_Handler</a> from hc32f460_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[25]">IRQ027_Handler</a> from hc32f460_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[26]">IRQ028_Handler</a> from hc32f460_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[27]">IRQ029_Handler</a> from hc32f460_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[28]">IRQ030_Handler</a> from hc32f460_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[29]">IRQ031_Handler</a> from hc32f460_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2a]">IRQ032_Handler</a> from hc32f460_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2b]">IRQ033_Handler</a> from hc32f460_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2c]">IRQ034_Handler</a> from hc32f460_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2d]">IRQ035_Handler</a> from hc32f460_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2e]">IRQ036_Handler</a> from hc32f460_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2f]">IRQ037_Handler</a> from hc32f460_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[30]">IRQ038_Handler</a> from hc32f460_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[31]">IRQ039_Handler</a> from hc32f460_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[32]">IRQ040_Handler</a> from hc32f460_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[33]">IRQ041_Handler</a> from hc32f460_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[34]">IRQ042_Handler</a> from hc32f460_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[35]">IRQ043_Handler</a> from hc32f460_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[36]">IRQ044_Handler</a> from hc32f460_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[37]">IRQ045_Handler</a> from hc32f460_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[38]">IRQ046_Handler</a> from hc32f460_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[39]">IRQ047_Handler</a> from hc32f460_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3a]">IRQ048_Handler</a> from hc32f460_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3b]">IRQ049_Handler</a> from hc32f460_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3c]">IRQ050_Handler</a> from hc32f460_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3d]">IRQ051_Handler</a> from hc32f460_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3e]">IRQ052_Handler</a> from hc32f460_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3f]">IRQ053_Handler</a> from hc32f460_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[40]">IRQ054_Handler</a> from hc32f460_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[41]">IRQ055_Handler</a> from hc32f460_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[42]">IRQ056_Handler</a> from hc32f460_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[43]">IRQ057_Handler</a> from hc32f460_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[44]">IRQ058_Handler</a> from hc32f460_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[45]">IRQ059_Handler</a> from hc32f460_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[46]">IRQ060_Handler</a> from hc32f460_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[47]">IRQ061_Handler</a> from hc32f460_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[48]">IRQ062_Handler</a> from hc32f460_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[49]">IRQ063_Handler</a> from hc32f460_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4a]">IRQ064_Handler</a> from hc32f460_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4b]">IRQ065_Handler</a> from hc32f460_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4c]">IRQ066_Handler</a> from hc32f460_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4d]">IRQ067_Handler</a> from hc32f460_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4e]">IRQ068_Handler</a> from hc32f460_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4f]">IRQ069_Handler</a> from hc32f460_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[50]">IRQ070_Handler</a> from hc32f460_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[51]">IRQ071_Handler</a> from hc32f460_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[52]">IRQ072_Handler</a> from hc32f460_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[53]">IRQ073_Handler</a> from hc32f460_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[54]">IRQ074_Handler</a> from hc32f460_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[55]">IRQ075_Handler</a> from hc32f460_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[56]">IRQ076_Handler</a> from hc32f460_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[57]">IRQ077_Handler</a> from hc32f460_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[58]">IRQ078_Handler</a> from hc32f460_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[59]">IRQ079_Handler</a> from hc32f460_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5a]">IRQ080_Handler</a> from hc32f460_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5b]">IRQ081_Handler</a> from hc32f460_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5c]">IRQ082_Handler</a> from hc32f460_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5d]">IRQ083_Handler</a> from hc32f460_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5e]">IRQ084_Handler</a> from hc32f460_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5f]">IRQ085_Handler</a> from hc32f460_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[60]">IRQ086_Handler</a> from hc32f460_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[61]">IRQ087_Handler</a> from hc32f460_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[62]">IRQ088_Handler</a> from hc32f460_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[63]">IRQ089_Handler</a> from hc32f460_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[64]">IRQ090_Handler</a> from hc32f460_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[65]">IRQ091_Handler</a> from hc32f460_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[66]">IRQ092_Handler</a> from hc32f460_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[67]">IRQ093_Handler</a> from hc32f460_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[68]">IRQ094_Handler</a> from hc32f460_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[69]">IRQ095_Handler</a> from hc32f460_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6a]">IRQ096_Handler</a> from hc32f460_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6b]">IRQ097_Handler</a> from hc32f460_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6c]">IRQ098_Handler</a> from hc32f460_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6d]">IRQ099_Handler</a> from hc32f460_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6e]">IRQ100_Handler</a> from hc32f460_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6f]">IRQ101_Handler</a> from hc32f460_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[70]">IRQ102_Handler</a> from hc32f460_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[71]">IRQ103_Handler</a> from hc32f460_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[72]">IRQ104_Handler</a> from hc32f460_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[73]">IRQ105_Handler</a> from hc32f460_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[74]">IRQ106_Handler</a> from hc32f460_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[75]">IRQ107_Handler</a> from hc32f460_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[76]">IRQ108_Handler</a> from hc32f460_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[77]">IRQ109_Handler</a> from hc32f460_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[78]">IRQ110_Handler</a> from hc32f460_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[79]">IRQ111_Handler</a> from hc32f460_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7a]">IRQ112_Handler</a> from hc32f460_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7b]">IRQ113_Handler</a> from hc32f460_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7c]">IRQ114_Handler</a> from hc32f460_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7d]">IRQ115_Handler</a> from hc32f460_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7e]">IRQ116_Handler</a> from hc32f460_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7f]">IRQ117_Handler</a> from hc32f460_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[80]">IRQ118_Handler</a> from hc32f460_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[81]">IRQ119_Handler</a> from hc32f460_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[82]">IRQ120_Handler</a> from hc32f460_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[83]">IRQ121_Handler</a> from hc32f460_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[84]">IRQ122_Handler</a> from hc32f460_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[85]">IRQ123_Handler</a> from hc32f460_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[86]">IRQ124_Handler</a> from hc32f460_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[87]">IRQ125_Handler</a> from hc32f460_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[88]">IRQ126_Handler</a> from hc32f460_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[89]">IRQ127_Handler</a> from hc32f460_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8a]">IRQ128_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8b]">IRQ129_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8c]">IRQ130_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8d]">IRQ131_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8e]">IRQ132_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8f]">IRQ133_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[90]">IRQ134_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[91]">IRQ135_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[92]">IRQ136_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[93]">IRQ137_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[94]">IRQ138_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[95]">IRQ139_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[96]">IRQ140_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[97]">IRQ141_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[98]">IRQ142_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[99]">IRQ143_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from hc32f460_interrupts.o(i.MemManage_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from hc32f460_interrupts.o(i.NMI_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from hc32f460_interrupts.o(i.PendSV_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from hc32f460_interrupts.o(i.SVC_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from hc32f460_interrupts.o(i.SysTick_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9b]">SystemInit</a> from system_hc32f460.o(i.SystemInit) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from hc32f460_interrupts.o(i.UsageFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[9d]">fputc</a> from hc32f460_utility.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[9a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[a1]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[104]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[105]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[aa]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[106]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[107]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ba]"></a>ADC_AddAdcChannel</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, hc32f460_adc.o(i.ADC_AddAdcChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_AddAdcChannel &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[bb]"></a>ADC_AddAvgChannel</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hc32f460_adc.o(i.ADC_AddAvgChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_AddAvgChannel &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[bc]"></a>ADC_ClrEocFlag</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hc32f460_adc.o(i.ADC_ClrEocFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_ClrEocFlag &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>ADC_ConfigAvg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32f460_adc.o(i.ADC_ConfigAvg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_ConfigAvg &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[be]"></a>ADC_GetChData</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, hc32f460_adc.o(i.ADC_GetChData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_GetChData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollingSa
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>ADC_GetEocFlag</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hc32f460_adc.o(i.ADC_GetEocFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_GetEocFlag &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>ADC_Init</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, hc32f460_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInitConfig
</UL>

<P><STRONG><a name="[c1]"></a>ADC_PollingSa</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, hc32f460_adc.o(i.ADC_PollingSa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC_PollingSa &rArr; ADC_GetChData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadAllData
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>ADC_StartConvert</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hc32f460_adc.o(i.ADC_StartConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_StartConvert &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>ADC_StopConvert</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hc32f460_adc.o(i.ADC_StopConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_StopConvert &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>BSP_PRINTF_PortInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ev_hc32f460_lqfp100_v2.o(i.BSP_PRINTF_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_PRINTF_PortInit &rArr; PORT_SetFunc &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d5]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[d6]"></a>CLK_MpllCmd</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_MpllCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[d7]"></a>CLK_MpllConfig</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_MpllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_MpllConfig &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[ce]"></a>CLK_SetPeriClkSource</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hc32f460_clk.o(i.CLK_SetPeriClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SetPeriClkSource &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
</UL>

<P><STRONG><a name="[cb]"></a>CLK_SetPllSource</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hc32f460_clk.o(i.CLK_SetPllSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SetPllSource &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
</UL>

<P><STRONG><a name="[d8]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, hc32f460_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetSysClkSource &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[da]"></a>CLK_SysClkConfig</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, hc32f460_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SysClkConfig &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[cd]"></a>CLK_UpllCmd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_UpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_UpllCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
</UL>

<P><STRONG><a name="[cc]"></a>CLK_UpllConfig</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_UpllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_UpllConfig &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
</UL>

<P><STRONG><a name="[ca]"></a>CLK_XtalCmd</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_XtalCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
</UL>

<P><STRONG><a name="[c9]"></a>CLK_XtalConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hc32f460_clk.o(i.CLK_XtalConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
</UL>

<P><STRONG><a name="[9f]"></a>Ddl_AssertHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f460_utility.o(i.Ddl_AssertHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClkSource
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopConvert
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConvert
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollingSa
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetEocFlag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigAvg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClrEocFlag
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAvgChannel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IrqHandler
</UL>

<P><STRONG><a name="[f6]"></a>Ddl_Delay1ms</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc32f460_utility.o(i.Ddl_Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ddl_Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>EFM_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f460_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[dc]"></a>EFM_SetLatency</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hc32f460_efm.o(i.EFM_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_SetLatency &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[ea]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f460_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ000_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ001_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ002_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ003_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ004_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ005_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ006_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ007_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ008_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ009_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ010_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ011_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ012_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ013_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ014_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ015_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ016_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ017_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ018_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ019_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ020_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ021_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ022_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ023_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ024_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ025_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ026_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ027_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ028_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ029_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ030_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ031_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ032_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ033_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ034_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ035_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ036_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ037_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ038_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ039_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ040_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ041_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ042_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ043_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ044_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ045_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ046_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ047_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ048_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ049_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ050_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ051_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ052_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ053_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ054_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ055_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ056_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ057_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ058_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ059_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ060_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ061_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ062_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ063_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ064_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ065_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ066_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ067_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ068_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ069_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ070_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ071_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ072_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ073_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ074_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ075_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ076_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ077_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ078_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ079_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ080_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ081_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ082_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ083_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ084_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ085_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ086_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ087_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ088_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ089_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ090_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ091_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ092_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ093_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ094_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ095_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ096_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ097_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ098_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ099_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ100_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ101_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ102_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ103_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ104_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ105_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ106_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ107_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ108_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ109_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ110_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ111_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ112_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ113_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ114_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ115_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ116_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ117_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ118_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ119_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ120_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ121_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ122_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ123_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ124_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ125_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ126_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ127_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NMI_Handler &rArr; NMI_IrqHandler &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>NMI_IrqHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hc32f460_exint_nmi_swi.o(i.NMI_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NMI_IrqHandler &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[d3]"></a>PORT_Init</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, hc32f460_gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetPinMode
</UL>

<P><STRONG><a name="[de]"></a>PORT_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_gpio.o(i.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>

<P><STRONG><a name="[d4]"></a>PORT_SetFunc</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, hc32f460_gpio.o(i.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_SetFunc &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRINTF_PortInit
</UL>

<P><STRONG><a name="[dd]"></a>PORT_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_gpio.o(i.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>

<P><STRONG><a name="[d1]"></a>PWC_Fcg3PeriphClockCmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hc32f460_pwc.o(i.PWC_Fcg3PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWC_Fcg3PeriphClockCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInitConfig
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>SRAM_CK_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_CK_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[e1]"></a>SRAM_CK_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_CK_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[df]"></a>SRAM_Init</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, hc32f460_sram.o(i.SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SRAM_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WT_Enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WT_Disable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CK_Enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CK_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[e2]"></a>SRAM_WT_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_WT_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[e0]"></a>SRAM_WT_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_WT_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, system_hc32f460.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9b]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, system_hc32f460.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>UART_PrintfInit</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, hc32f460_utility.o(i.UART_PrintfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_PrintfInit &rArr; SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[108]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[db]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[10a]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9d]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hc32f460_utility.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fputc &rArr; UartPutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[9a]"></a>main</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; UART_PrintfInit &rArr; SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopConvert
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConvert
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollingSa
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetEocFlag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClrEocFlag
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c5]"></a>AdcChannelConfig</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(i.AdcChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AdcChannelConfig &rArr; AdcSetChannelPinMode &rArr; AdcSetPinMode &rArr; PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigAvg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAvgChannel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetChannelPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[c7]"></a>AdcClockConfig</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, main.o(i.AdcClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AdcClockConfig &rArr; CLK_XtalCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClkSource
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[cf]"></a>AdcConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.AdcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AdcConfig &rArr; AdcChannelConfig &rArr; AdcSetChannelPinMode &rArr; AdcSetPinMode &rArr; PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInitConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>AdcInitConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.AdcInitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AdcInitConfig &rArr; PWC_Fcg3PeriphClockCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[c6]"></a>AdcSetChannelPinMode</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, main.o(i.AdcSetChannelPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AdcSetChannelPinMode &rArr; AdcSetPinMode &rArr; PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[d2]"></a>AdcSetPinMode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, main.o(i.AdcSetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AdcSetPinMode &rArr; PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetChannelPinMode
</UL>

<P><STRONG><a name="[e9]"></a>SystemClockConfig</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, main.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemClockConfig &rArr; CLK_XtalCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>SetUartBaudrate</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, hc32f460_utility.o(i.SetUartBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfInit
</UL>

<P><STRONG><a name="[f4]"></a>UartPutChar</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, hc32f460_utility.o(i.UartPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[c2]"></a>ADC_ReadAllData</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, hc32f460_adc.o(i.ADC_ReadAllData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_ReadAllData
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollingSa
</UL>

<P><STRONG><a name="[ef]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ee]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[f2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f1]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
